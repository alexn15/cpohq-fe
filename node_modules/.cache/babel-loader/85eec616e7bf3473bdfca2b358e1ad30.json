{"ast":null,"code":"/**\n * @author [Alex Neo]\n * @email [alex.neo0115@gmail.com]\n * @create date 2022-01-12 18:08:03\n * @modify date 2022-01-12 18:08:03\n * @desc [create reducer]\n*/\nimport { actionTypes } from \"../action/index\";\nconst initState = {\n  todoMenu: [],\n  counterList: []\n};\n\nconst reducer = (state = initState, action) => {\n  const tempTodo = state.todoMenu.map(list => list);\n\n  switch (action.type) {\n    case actionTypes.ADD_MENU_ITEMS:\n      const tempCount = state.counterList.map(list => list); //init data for menu items\n\n      tempTodo.push(action.payload);\n      tempCount.push({\n        data: 0\n      });\n      return {\n        todoMenu: tempTodo,\n        counterList: tempCount\n      };\n\n    case actionTypes.INCREASE_COUNTER:\n      const tempIncCount = state.counterList.map(list => list); //update array if exist else add\n\n      const updatedCounter = tempIncCount.map((item, index) => index === action.payload.index ? { ...tempIncCount[index],\n        data: tempIncCount[index].data + action.payload.data\n      } : item);\n      console.log(\"updatedCounter\", updatedCounter);\n      return {\n        todoMenu: tempTodo,\n        counterList: updatedCounter\n      };\n\n    case actionTypes.DECREASE_COUNTER:\n      //get current index\n      const x = tempCount.findIndex(el => el.id === action.payload.id); //update array if exist else add\n\n      if (x > -1) {\n        const y = tempCount[x].data - action.payload.data;\n        tempCount[x] = { ...tempCount[x],\n          data: y < 0 ? 0 : y\n        };\n      } else {\n        tempCount.push(action.payload);\n      }\n\n      return {\n        todoMenu: tempTodo,\n        counterList: tempCount\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/aneo/Desktop/cpohq/twine-interview-frontend-an/src/redux/reducer/index.js"],"names":["actionTypes","initState","todoMenu","counterList","reducer","state","action","tempTodo","map","list","type","ADD_MENU_ITEMS","tempCount","push","payload","data","INCREASE_COUNTER","tempIncCount","updatedCounter","item","index","console","log","DECREASE_COUNTER","x","findIndex","el","id","y"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,WAAT,QAA4B,iBAA5B;AAGA,MAAMC,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAE,EADI;AAEdC,EAAAA,WAAW,EAAE;AAFC,CAAlB;;AAMA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGJ,SAAT,EAAoBK,MAApB,KAA+B;AAC3C,QAAMC,QAAQ,GAAGF,KAAK,CAACH,QAAN,CAAeM,GAAf,CAAmBC,IAAI,IAAIA,IAA3B,CAAjB;;AAEA,UAAQH,MAAM,CAACI,IAAf;AACI,SAAKV,WAAW,CAACW,cAAjB;AACI,YAAMC,SAAS,GAAGP,KAAK,CAACF,WAAN,CAAkBK,GAAlB,CAAsBC,IAAI,IAAIA,IAA9B,CAAlB,CADJ,CAEI;;AACAF,MAAAA,QAAQ,CAACM,IAAT,CAAcP,MAAM,CAACQ,OAArB;AACAF,MAAAA,SAAS,CAACC,IAAV,CAAe;AAACE,QAAAA,IAAI,EAAE;AAAP,OAAf;AACA,aAAO;AACHb,QAAAA,QAAQ,EAAEK,QADP;AAEHJ,QAAAA,WAAW,EAAES;AAFV,OAAP;;AAIJ,SAAKZ,WAAW,CAACgB,gBAAjB;AACI,YAAMC,YAAY,GAAGZ,KAAK,CAACF,WAAN,CAAkBK,GAAlB,CAAsBC,IAAI,IAAIA,IAA9B,CAArB,CADJ,CAEI;;AACA,YAAMS,cAAc,GAAGD,YAAY,CAACT,GAAb,CAAiB,CAACW,IAAD,EAAOC,KAAP,KACpCA,KAAK,KAAKd,MAAM,CAACQ,OAAP,CAAeM,KAAzB,GAAkC,EAAC,GAAGH,YAAY,CAACG,KAAD,CAAhB;AAAyBL,QAAAA,IAAI,EAAGE,YAAY,CAACG,KAAD,CAAZ,CAAoBL,IAApB,GAA2BT,MAAM,CAACQ,OAAP,CAAeC;AAA1E,OAAlC,GAAoHI,IADjG,CAAvB;AAIAE,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,cAA9B;AAEA,aAAO;AACHhB,QAAAA,QAAQ,EAAEK,QADP;AAEHJ,QAAAA,WAAW,EAAEe;AAFV,OAAP;;AAIJ,SAAKlB,WAAW,CAACuB,gBAAjB;AACI;AACA,YAAMC,CAAC,GAAGZ,SAAS,CAACa,SAAV,CAAoBC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUrB,MAAM,CAACQ,OAAP,CAAea,EAAnD,CAAV,CAFJ,CAGI;;AACA,UAAIH,CAAC,GAAG,CAAC,CAAT,EAAY;AACR,cAAMI,CAAC,GAAGhB,SAAS,CAACY,CAAD,CAAT,CAAaT,IAAb,GAAoBT,MAAM,CAACQ,OAAP,CAAeC,IAA7C;AACAH,QAAAA,SAAS,CAACY,CAAD,CAAT,GAAe,EAAC,GAAGZ,SAAS,CAACY,CAAD,CAAb;AAAkBT,UAAAA,IAAI,EAAGa,CAAC,GAAG,CAAJ,GAAO,CAAP,GAAUA;AAAnC,SAAf;AACH,OAHD,MAGK;AACDhB,QAAAA,SAAS,CAACC,IAAV,CAAeP,MAAM,CAACQ,OAAtB;AACH;;AACD,aAAO;AACHZ,QAAAA,QAAQ,EAAEK,QADP;AAEHJ,QAAAA,WAAW,EAAES;AAFV,OAAP;;AAIJ;AACI,aAAOP,KAAP;AAtCR;AAwCH,CA3CD;;AA8CA,eAAeD,OAAf","sourcesContent":["/**\n * @author [Alex Neo]\n * @email [alex.neo0115@gmail.com]\n * @create date 2022-01-12 18:08:03\n * @modify date 2022-01-12 18:08:03\n * @desc [create reducer]\n*/\n\nimport { actionTypes } from \"../action/index\"\n\n\nconst initState = {\n    todoMenu: [],\n    counterList: []\n}\n\n\nconst reducer = (state = initState, action) => {\n    const tempTodo = state.todoMenu.map(list => list);\n\n    switch (action.type){\n        case actionTypes.ADD_MENU_ITEMS:\n            const tempCount = state.counterList.map(list => list);\n            //init data for menu items\n            tempTodo.push(action.payload);\n            tempCount.push({data: 0});\n            return {\n                todoMenu: tempTodo,\n                counterList: tempCount\n            };\n        case actionTypes.INCREASE_COUNTER:\n            const tempIncCount = state.counterList.map(list => list);\n            //update array if exist else add\n            const updatedCounter = tempIncCount.map((item, index) =>\n                index === action.payload.index ?  {...tempIncCount[index], data : tempIncCount[index].data + action.payload.data} : item\n            );\n\n            console.log(\"updatedCounter\", updatedCounter);\n            \n            return {\n                todoMenu: tempTodo,\n                counterList: updatedCounter,\n            };\n        case actionTypes.DECREASE_COUNTER:\n            //get current index\n            const x = tempCount.findIndex(el => el.id === action.payload.id);\n            //update array if exist else add\n            if (x > -1) {\n                const y = tempCount[x].data - action.payload.data\n                tempCount[x] = {...tempCount[x], data : y < 0? 0: y} \n            }else{\n                tempCount.push(action.payload);\n            } \n            return {\n                todoMenu: tempTodo,\n                counterList: tempCount,\n            };\n        default:\n            return state;\n    }\n}\n\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}